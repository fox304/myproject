

"""

семинар 2

Задание №1
Создайте модель для запоминания бросков монеты: орёл или
решка.
Также запоминайте время броска

Задание №2
Доработаем задачу 1.
Добавьте статический метод для статистики по n последним
броскам монеты.
Метод должен возвращать словарь с парой ключей значений, для орла и для решки.

Задание №3
Создайте модель Автор. Модель должна содержать
следующие поля:
○ имя до 100 символов
○ фамилия до 100 символов
○ почта
○ биография
○ день рождения
Дополнительно создай пользовательское поле “полное
имя”, которое возвращает имя и фамилию.

Задание №4
Создайте модель Статья (публикация). Авторы из прошлой задачи могут
писать статьи. У статьи может быть только один автор. У статьи должны быть
следующие обязательные поля:
○ заголовок статьи с максимальной длиной 200 символов
○ содержание статьи
○ дата публикации статьи
○ автор статьи с удалением связанных объектов при удалении автора
○ категория статьи с максимальной длиной 100 символов
○ количество просмотров статьи со значением по умолчанию 0
○ флаг, указывающий, опубликована ли статья со значением по умолчанию
False

Задание №5
Доработаем задачу 4.
Создай четыре функции для реализации CRUD в модели
Django Article (статья).
*Используйте Django команды для вызова функций.


Задание №6
Создайте модель Комментарий.
Авторы могут добавлять комментарии к своим и чужим
статьям. Т.е. у комментария может быть один автор.
И комментарий относится к одной статье. У модели должны
быть следующие поля
○ автор
○ статья
○ комментарий
○ дата создания
○ дата изменения


Задание №7
Создайте функции для работы с базой данных:
○ Поиск всех статей автора по его имени
○ Поиск всех комментариев автора по его имени
○ Поиск всех комментариев по названию статьи
Каждая из трёх функций должна иметь возможность
сортировки и ограничение выборки по количеству.


Задание №8
Создайте три модели Django: клиент, товар и заказ. Клиент
может иметь несколько заказов. Заказ может содержать
несколько товаров. Товар может входить в несколько
заказов.
Поля модели "Клиент":
○ имя клиента
○ электронная почта клиента
○ номер телефона клиента
○ адрес клиента
○ дата регистрации клиента



Задание №8
Поля модели "Товар":
○ название товара
○ описание товара
○ цена товара
○ количество товара
○ дата добавления товара


Домашнее задание
Поля модели "Заказ":
○ связь с моделью "Клиент", указывает на клиента,
сделавшего заказ
○ связь с моделью "Товар", указывает на товары,
входящие в заказ
○ общая сумма заказа
○ дата оформления заказа
*Допишите несколько функций CRUD для работы с
моделями по желанию. Что по вашему мнению актуально в
такой базе данных.




"""
from django.urls import reverse

"""
-------------------------семинар 3--------------------------

Задание №1
Изменяем задачу 8 из семинара 1 с выводом двух html страниц:
главной и о себе.
Перенесите вёрстку в шаблоны.
Представления должны пробрасывать полезную информацию в
шаблон через контекст.

Задание №3
Доработаем задачу 7 из урока 1, где бросали монетку,
игральную кость и генерировали случайное число.
Маршруты могут принимать целое число - количество
бросков.
Представления создают список с результатами бросков и
передают его в контекст шаблона.
Необходимо создать универсальный шаблон для вывода
результатов любого из трёх представлений.

Задание №4
Доработаем задачи из прошлого семинара по созданию
моделей автора, статьи и комментария.
Создайте шаблон для вывода всех статей автора в виде
списка заголовков.
○ Если статья опубликована, заголовок должен быть
ссылкой на статью.
○ Если не опубликована, без ссылки.
Не забываем про код представления с запросом к базе
данных и маршруты.



Задание №5
Доработаем задачу 4.
Создай шаблон для вывода подробной информации о
статье.
Внесите изменения в views.py - создайте представление и в
urls.py - добавьте маршрут.
*Увеличивайте счётчик просмотра статьи на единицу при
каждом просмотре

Задание №6
Измените шаблон для вывода заголовка и текста статьи, а
также всех комментариев к статье с указанием текста
комментария, автора комментария и даты обновления
комментария в хронологическом порядке.
Если комментарий изменялся, дополнительно напишите
“изменено”.
Не забывайте про представление с запросом в БД и
маршруты. Проверьте, что они работают верно


-------------------------семинар 4--------------------------
Задание №1
Доработаем задачу про броски монеты, игральной кости и
случайного числа.
Создайте форму, которая предлагает выбрать: монета, кости,
числа.
Второе поле предлагает указать количество попыток от 1 до 64.


Задание №2
Доработаем задачу 1.
Создайте представление, которое выводит форму выбора.
В зависимости от переданных значений представление
вызывает одно из трёх представлений, созданных на
прошлом семинаре (если данные прошли проверку, конечно
же).

Задание №3
Продолжаем работу с авторами, статьями и комментариями.
Создайте форму для добавления нового автора в базу
данных.
Используйте ранее созданную модель Author

Задание №4
Аналогично автору создайте форму добавления новой
статьи.
Автор статьи должен выбираться из списка (все доступные в
базе данных авторы).

Задание №5
Доработаем задачу 6 из прошлого семинара.
Мы сделали вывод статьи и комментариев.
Добавьте форму ввода нового комментария в
существующий шаблон.


Задание №6
Доработаем задачу про клиентов, заказы и товары из
прошлого семинара.
Создайте форму для редактирования товаров в базе
данных


"""


import random

from django.db import models



class AuthorModel(models.Model):
	name = models.CharField(max_length=4)
	surname = models.CharField(max_length=100)
	email = models.EmailField()
	bio = models.TextField()
	dob = models.DateField(auto_now=True)
	fullname = models.CharField(blank=True, max_length=100)

	def save(self, *args, **kwargs):
		self.fullname = f"{self.name} {self.surname}"
		return super().save(*args, **kwargs)

	# def __str__(self):
	# 	return self.fullname


class ArticleModel(models.Model):
	author = models.ForeignKey(AuthorModel,related_name="my1",on_delete=models.CASCADE)
	title = models.CharField(max_length=200)
	text = models.TextField()
	publicated_date = models.DateTimeField(auto_now_add=True)

	category = models.CharField(max_length=100)
	view_count = models.IntegerField(default=0)
	publicated_flag = models.BooleanField(default=False)

	def get_absolute_url(self):
		return reverse('random_number')

	# def __str__(self):
	# 	return self.title


class Comment(models.Model):
	article = models.ForeignKey(ArticleModel,related_name="my", on_delete=models.CASCADE)
	author = models.ForeignKey(AuthorModel, on_delete=models.CASCADE)
	text = models.TextField()
	changed_date = models.DateTimeField(auto_now=True)         # само будет обновляться при редактировании
	publicated_date = models.DateTimeField(auto_now_add=True)  # автоматом будет добавляться при создании

	# def __str__(self):
	# 	return self.text


class RandomDrops(models.Model):
	side = models.CharField(max_length=10,default=random.choice(['орел','решка']))
	time_drop = models.DateTimeField(auto_now_add=True)

	def __str__(self):
		return f'выпала сторона {self.side} время {self.time_drop}'

	@staticmethod
	def amount_drops(n):
		total = RandomDrops.objects.all().count()
		slice = RandomDrops.objects.all()[total-n:]
		reverse = sum(i.side == 'орел' for i in slice)
		return {'reverse': reverse, 'averse': n-reverse}


















